{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","resp","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,uBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGAJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMhB,UACE,4CACA,uBACEO,KAAK,OACLC,MAAQT,EACRU,SArBkB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,c,+BCTnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KACd,SAAAC,GAAQ,IAAD,EACH,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAX3B,kBAgBbM,GAhBa,4CAAH,sDCGPO,G,KAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,kCAAMA,UCJLO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECJwB,SAACA,GAC3B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBI,OAXEC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAAC,GACJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAIhB,CAACpB,IAEGqB,EDdsBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACA,mCAAOpB,EAAP,OAECoB,GAAW,mBAAGJ,UAAU,iCAAb,2BACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACP,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEdpBgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,uBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCjBlC6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.88b98bed.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const CategoryAdd = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    //tomar los datos de imput \n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //actualizando lista\n       if(inputValue.trim().length > 2){\n          setCategories( cats => [ inputValue, ...cats] );\n          setInputValue('');\n       }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n          <h2>Buscar GIF</h2>  \n          <input \n            type=\"text\"\n            value={ inputValue } \n            onChange={ handleInputChange }\n          />\n        </form>\n    )\n}\n\n//lo mandas o truena\nCategoryAdd.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=KsY8rrnSXEPOfzkDboPRphHIyQRVrlxq&limit=10`;\n    const response = await fetch(url);\n    const { data } = await response.json();\n\n    const gifs = data.map(\n        img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        }\n    )\n        //set data obsevable jejej\n   return gifs;\n\n}","import React from 'react';\nimport 'animate.css';\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url} alt={ title} />\n            <p> { title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\nimport 'animate.css';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n        <h3> { category } </h3>\n        {/* loading ? 'Cargando...' : '' */}\n        {loading && <p className=\"animate_animated animate_flash\">Cargando ....</p>}\n        <div className=\"card-grid\">\n            {\n                images.map( img => (\n                        <GifGridItem\n                        key={img.id} \n                        { ...img}\n                        />\n                    ))\n                }\n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n      data: [],\n      loading: true\n  })\n  \n        //ejecutar 1 vez algo cuando el componente es renderizado\n        useEffect(() => {\n          getGifs(category)\n            .then(resp => {\n              setState({\n                data: resp,\n                loading: false\n              });\n            })\n      // si la categoria cambia hay que aÃ±adirla al [] para que se vuelva a hacer la peticion \n      }, [category])\n\n      return state;\n\n\n}\n","import React, {useState} from 'react'\nimport { CategoryAdd } from './components/CategoryAdd'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Ghost in the shell'])\n\n /*    const handleAdd = () => {\n        //setCategories( [...categories, \"HunterXHunter\"] );\n        setCategories( cats => [...cats, 'HunterXHunter'] );\n    } */\n\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <CategoryAdd setCategories={ setCategories }/>\n            <hr />\n\n            <ol>\n                {\n                    categories.map( category => \n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />)\n                }\n            </ol>\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}